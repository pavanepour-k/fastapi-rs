[build-system]
requires = ["maturin>=1.4,<2.0"]
build-backend = "maturin"

[project]
name = "fastapi-rs"
version = "0.1.0"
description = "High-performance Rust implementation for FastAPI core components"
authors = [{ name = "pavanepour.k", email = "pavanepour.k@example.com" }]
license = { text = "MIT" }
readme = "README.md"
requires-python = ">=3.8"
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
    "Operating System :: OS Independent",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.8",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Programming Language :: Python :: 3.13",
    "Programming Language :: Rust",
    "Topic :: Internet :: WWW/HTTP",
    "Topic :: Software Development :: Libraries :: Python Modules",
    "Framework :: FastAPI",
]
keywords = ["fastapi", "web", "api", "async", "performance", "rust"]
dependencies = [
    "fastapi>=0.115.0",
    "starlette>=0.37.0",
    "pydantic>=2.0.0",
    "typing-extensions>=4.8.0",
]

[project.optional-dependencies]
dev = [
    "pytest>=7.4.0",
    "pytest-asyncio>=0.21.0",
    "pytest-benchmark>=4.0.0",
    "httpx>=0.24.0",
    "uvicorn>=0.23.0",
    "black>=23.7.0",
    "ruff>=0.0.284",
    "mypy>=1.5.0",
]
benchmark = [
    "pytest-benchmark>=4.0.0",
    "memory-profiler>=0.61.0",
    "psutil>=5.9.0",
]

[project.urls]
Homepage = "https://github.com/pavanepour-k/fastapi-rs"
Repository = "https://github.com/pavanepour-k/fastapi-rs"
Documentation = "https://github.com/pavanepour-k/fastapi-rs/blob/main/README.md"
Issues = "https://github.com/pavanepour-k/fastapi-rs/issues"

[tool.maturin]
python-source = "."
module-name = "fastapi._fastapi_rust"
features = ["pyo3/extension-module"]
compatibility = "manylinux_2_28"
skip-auditwheel = false

[tool.pytest.ini_options]
testpaths = ["tests"]
python_files = ["test_*.py", "*_test.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
addopts = ["--strict-markers", "--strict-config", "--disable-warnings", "-ra"]
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "benchmark: marks tests as benchmarks",
    "unit: marks tests as unit tests",
    "integration: marks tests as integration tests",
]

[tool.black]
line-length = 80
target-version = ["py38", "py39", "py310", "py311", "py312"]
include = '\.pyi?$'
extend-exclude = '''
/(
  # directories
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | _build
  | buck-out
  | build
  | dist
)/
'''

[tool.ruff]
target-version = "py38"
line-length = 80
select = [
    "E",  # pycodestyle errors
    "W",  # pycodestyle warnings
    "F",  # pyflakes
    "I",  # isort
    "B",  # flake8-bugbear
    "C4", # flake8-comprehensions
    "UP", # pyupgrade
]
ignore = [
    "E501", # line too long, handled by black
    "B008", # do not perform function calls in argument defaults
    "C901", # too complex
]

[tool.mypy]
python_version = "3.8"
strict = true
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true

[[tool.mypy.overrides]]
module = ["fastapi._fastapi_rust.*"]
ignore_missing_imports = true
